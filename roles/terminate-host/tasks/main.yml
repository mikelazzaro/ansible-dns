---

- name: Get list of matching AMIs
  ec2_ami_facts:
    region: "{{ aws_region }}"
    owner: "{{ provision_latest_ami_owner }}"
    filters:
      name: "{{ provision_latest_ami_pattern }}"
#  when: provisioning_use_latest_ami
  register: ami_list

- name: Get most recent AMI
  set_fact:
    aws_ami: >
      {{ ami_list.images | sort(attribute='creation_date') | last }}

#- name: Get latest AMI
#  ec2_ami_find:
#    region: "{{ aws_region }}"
#    name: "{{ provision_latest_ami_pattern }}"
#    owner: "{{ provision_latest_ami_owner }}"
#    sort: name
#    sort_order: descending
#    sort_end: 1
#  when: provision_use_latest_ami
#  register: ami_list
#
#- name: Set aws_ami based on lookup
#  set_fact:
#    aws_ami: "{{ ami_list.results[0].ami_id }}"
#  when: provision_use_latest_ami

- name: Get subnet ID
  local_action: ec2_vpc_subnet_facts
  args:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ aws_subnet_name }}"
  register: subnet_facts

- set_fact:
    subnet_id: "{{ subnet_facts.subnets[0].id }}"

- name: Terminate any running instances
  local_action: ec2
  args:
    instance_type: "{{ aws_instance_type }}"
    image: "{{ aws_ami.image_id }}"
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ subnet_id }}"
    exact_count: 0
    count_tag:
      Name: "{{ aws_name_tag }}"
    wait: yes
  register: ec2